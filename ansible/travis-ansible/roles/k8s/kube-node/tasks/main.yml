---
# tasks file for roles/kube-node

- name: 准备docker相关目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ bin_dir }}"
  - /etc/docker

- name: 下载 docker 二进制文件
  copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
  - docker-containerd
  - docker-containerd-shim
  - docker-init
  - docker-runc
  - docker
  - docker-containerd-ctr
  - dockerd
  - docker-proxy
  tags: upgrade_docker, download_docker

- name: 创建docker的systemd unit文件
  template: src=docker.service.j2 dest=/etc/systemd/system/docker.service
  tags: upgrade_docker, download_docker

- name: docker国内镜像加速
  template: src=daemon.json.j2 dest=/etc/docker/daemon.json

- name: 开机启用docker 服务
  shell: systemctl enable docker
  ignore_errors: true

- name: 开启docker 服务
  shell: systemctl daemon-reload && systemctl restart docker
  tags: upgrade_docker

- name: flush-iptables
  shell: "iptables -F && iptables -X \
        && iptables -F -t nat && iptables -X -t nat \
        && iptables -F -t raw && iptables -X -t raw \
        && iptables -F -t mangle && iptables -X -t mangle"


- name: 下载 kubelet,kube-proxy 二进制和基础 cni plugins
  copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
  - kubelet
  - kube-proxy
  tags: upgrade_k8s


- name: 创建kubelet的systemd unit文件
  template: src=kubelet.service.j2 dest=/etc/systemd/system/kubelet.service
  tags: upgrade_k8s, restart_node

- name: create /var/lib/kubelet directory
  file: name=/var/lib/kubelet state=directory

- name: 准备kubelet 证书签名请求
  template: src=kubelet-csr.json.j2 dest={{ ca_dir }}/kubelet-csr.json

- name: 创建 kubelet 证书与私钥
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
        -ca={{ ca_dir }}/ca.pem \
        -ca-key={{ ca_dir }}/ca-key.pem \
        -config={{ ca_dir }}/ca-config.json \
        -profile=kubernetes kubelet-csr.json | {{ bin_dir }}/cfssljson -bare kubelet"

- name: 设置集群参数
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig=kubelet.kubeconfig"

- name: 设置客户端认证参数
  shell: "{{ bin_dir }}/kubectl config set-credentials system:node:{{ inventory_hostname }} \
        --client-certificate={{ ca_dir }}/kubelet.pem \
        --embed-certs=true \
        --client-key={{ ca_dir }}/kubelet-key.pem \
        --kubeconfig=kubelet.kubeconfig"

- name: 设置上下文参数
  shell: "{{ bin_dir }}/kubectl config set-context default \
        --cluster=kubernetes \
        --user=system:node:{{ inventory_hostname }} \
        --kubeconfig=kubelet.kubeconfig"

- name: 选择默认上下文
  shell: "{{ bin_dir }}/kubectl config use-context default \
        --kubeconfig=kubelet.kubeconfig"

- name: 移动 kubelet.kubeconfig
  shell: "mv /root/kubelet.kubeconfig /etc/kubernetes/"

- name: 开机启用kubelet 服务
  shell: systemctl enable kubelet
  ignore_errors: true

- name: 开启kubelet 服务
  shell: systemctl daemon-reload && systemctl restart kubelet
  tags: upgrade_k8s, restart_node

- name: 创建kube-proxy 服务文件
  tags: reload-kube-proxy, upgrade_k8s, restart_node
  template: src=kube-proxy.service.j2 dest=/etc/systemd/system/kube-proxy.service

- name: create /var/lib/kube-proxy directory
  file: name=/var/lib/kube-proxy state=directory

- name: 准备kube-proxy 证书签名请求
  template: src=kube-proxy-csr.json.j2 dest={{ ca_dir }}/kube-proxy-csr.json

- name: 创建 kube-proxy证书与私钥
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
        -ca={{ ca_dir }}/ca.pem \
        -ca-key={{ ca_dir }}/ca-key.pem \
        -config={{ ca_dir }}/ca-config.json \
        -profile=kubernetes kube-proxy-csr.json | {{ bin_dir }}/cfssljson -bare kube-proxy"

- name: 设置集群参数
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig=kube-proxy.kubeconfig"
- name: 设置客户端认证参数
  shell: "{{ bin_dir }}/kubectl config set-credentials kube-proxy \
        --client-certificate={{ ca_dir }}/kube-proxy.pem \
        --client-key={{ ca_dir }}/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig"
- name: 设置上下文参数
  shell: "{{ bin_dir }}/kubectl config set-context default \
        --cluster=kubernetes \
        --user=kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig"
- name: 选择默认上下文
  shell: "{{ bin_dir }}/kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig"

- name: 移动 kube-proxy.kubeconfig
  shell: "mv /root/kube-proxy.kubeconfig /etc/kubernetes/"


- name: 开机启用kube-proxy 服务
  shell: systemctl enable kube-proxy
  ignore_errors: true

- name: 开启kube-proxy 服务
  shell: systemctl daemon-reload && systemctl restart kube-proxy
  tags: reload-kube-proxy, upgrade_k8s, restart_node

- name: 轮询等待kubelet启动
  shell: "systemctl status kubelet.service|grep Active"
  register: kubelet_status
  until: '"running" in kubelet_status.stdout'
  retries: 8
  delay: 2

- name: 轮询等待node达到Ready状态
  shell: "{{ bin_dir }}/kubectl get node {{ inventory_hostname }}|awk 'NR>1{print $2}'"
  register: node_status
  delegate_to: "{{ groups.deploy[0] }}"
  until: node_status.stdout == "Ready" or node_status.stdout == "NotReady"
  retries: 8
  delay: 8
  tags: upgrade_k8s, restart_node

- name: 设置node节点role
  shell: "{{ bin_dir }}/kubectl label node {{ inventory_hostname }} kubernetes.io/role=node --overwrite"
  ignore_errors: true
  delegate_to: "{{ groups.deploy[0] }}"
